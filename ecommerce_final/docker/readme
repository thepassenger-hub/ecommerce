/////////////////////////////////////////////////////////////////
// start all containers as written in the docker-compose.yml file
// use -d to detach the process
/////////////////////////////////////////////////////////////////
sudo docker-compose up

//sudo docker-compose up = Create and start containers
//sudo docker-compose down --volumes = Stop and remove containers, networks + storage
//sudo docker-compose stop = Stop services
//sudo docker-compose start = Start services

/////////////////////////////////////////////////////////////////
// start mongo container only
/////////////////////////////////////////////////////////////////
sudo docker start mongo

/////////////////////////////////////////////////////////////////
// access into mongo with wallet user
/////////////////////////////////////////////////////////////////
mongo -u walletservice -p walletservice --authenticationDatabase admin

// remember to **use** the right database (e.g: use walletservice)

/////////////////////////////////////////////////////////////////
// initialize mongo replicas, users and add debezium connector
// run only when previous command is done
/////////////////////////////////////////////////////////////////
./script.sh

/////////////////////////////////////////////////////////////////
// list all topics in kafka
/////////////////////////////////////////////////////////////////
WSL2:$ docker exec kafka kafka-topics --list --zookeeper zookeeper:2181

/////////////////////////////////////////////////////////////////
// delete topics in kafka
/////////////////////////////////////////////////////////////////
WSL2:$ docker exec kafka kafka-topics --delete --zookeeper zookeeper:2181 --topic <topic_name>

/////////////////////////////////////////////////////////////////
// docker.sh is a script to use docker shortcuts (i.e. stop all containers etc)
/////////////////////////////////////////////////////////////////
./docker.sh

/////////////////////////////////////////////////////////////////
// rsconfig is the configuration for mongo replicas. do not touch it
/////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////
// check connector online (DEBEZIUM)
/////////////////////////////////////////////////////////////////
curl -H "Accept:application/json" localhost:8083/connectors/

/////////////////////////////////////////////////////////////////
// delete connector
/////////////////////////////////////////////////////////////////
curl -i -X DELETE -H "Accept:application/json" localhost:8083/connectors/orders-connector

/////////////////////////////////////////////////////////////////
// add connector
/////////////////////////////////////////////////////////////////
curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d "$(cat connector.json )"

/////////////////////////////////////////////////////////////////
// Debezium configuration
/////////////////////////////////////////////////////////////////
{
  "name": "orders-connector",
  "config": { //esiste un modo per distinguere tra insert, update, all
    "collection.include.list": "walletservice.transactions", <----- collections da osservare
    ...
    "transforms": "route", <- trasforma la route del topic evitando messaggi superflui
    "transforms.route.type": "org.apache.kafka.connect.transforms.RegexRouter",
    "transforms.route.regex": "(.*)orderservice(.*)",
    ...
    "transforms.route.replacement": "topic_name", <- topic che debezium invierÃ  al consumer in ascolto
  }
}
